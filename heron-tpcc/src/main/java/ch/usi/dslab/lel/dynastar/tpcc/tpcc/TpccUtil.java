package ch.usi.dslab.lel.dynastar.tpcc.tpcc;/*
 * jTPCCUtil - utility functions for the Open Source Java implementation of
 *    the TPC-C benchmark
 *
 * Copyright (C) 2003, Raul Barbosa
 * Copyright (C) 2004-2016, Denis Lussier
 *
 */


import ch.usi.dslab.lel.dynastar.tpcc.TpccCommandType;
import ch.usi.dslab.lel.dynastar.tpcc.rows.Row;

//import ch.usi.dslab.lel.dynastarv2.Partition;

import ch.usi.dslab.lel.dynastar.tpcc.objects.ObjId;
import ch.usi.dslab.lel.dynastar.tpcc.objects.PRObjectMap;

import java.util.*;

public class TpccUtil extends TpccConfig {

    static String[] CUSTOMER_NAMES = {"ABLEBARCALLY", "ESEOUGHTESE", "PRESOUGHTOUGHT", "ESEEINGPRI", "OUGHTPRESABLE", "ABLEOUGHTCALLY", "EINGATIONPRES", "PRIESEPRES", "OUGHTATIONANTI", "EINGPRESCALLY", "ABLEESECALLY", "EINGATIONATION", "ATIONEINGESE", "PRIPRICALLY", "BAREINGBAR", "ANTICALLYCALLY", "BAROUGHTPRES", "OUGHTABLEESE", "OUGHTCALLYBAR", "ATIONANTIBAR", "CALLYATIONATION", "ABLEESEOUGHT", "ANTIPRESOUGHT", "ESEPRIESE", "ANTIOUGHTOUGHT", "ESEOUGHTBAR", "OUGHTEINGBAR", "EINGANTIEING", "CALLYBARABLE", "ATIONCALLYATION", "PRIEINGCALLY", "PRESATIONCALLY", "OUGHTOUGHTCALLY", "PRESPRESPRI", "EINGABLEANTI", "ANTICALLYEING", "BARPRESESE", "OUGHTBARPRES", "PRESATIONBAR", "PRIABLEPRI", "PRESATIONABLE", "PRESANTICALLY", "ABLEBAROUGHT", "CALLYANTIATION", "ABLEESEEING", "ATIONBAREING", "BARBAROUGHT", "ATIONPRESANTI", "ATIONEINGABLE", "CALLYCALLYABLE", "PRESATIONANTI", "EINGABLEOUGHT", "ATIONOUGHTPRES", "CALLYOUGHTABLE", "CALLYBAROUGHT", "PRIESEEING", "PRESESEESE", "EINGATIONESE", "PRIATIONCALLY", "ABLEANTICALLY", "OUGHTESEATION", "PRESPRIPRI", "ESEABLEOUGHT", "ABLECALLYPRES", "ABLECALLYBAR", "OUGHTOUGHTPRI", "CALLYABLEPRES", "CALLYATIONOUGHT", "CALLYPRESANTI", "ABLEANTIABLE", "OUGHTATIONOUGHT", "EINGPRESESE", "CALLYABLEPRI", "BARESEESE", "OUGHTCALLYABLE", "OUGHTESECALLY", "CALLYOUGHTATION", "ANTIATIONEING", "OUGHTBARESE", "OUGHTPRIPRI", "ATIONESEANTI", "PRESEINGEING", "EINGATIONABLE", "EINGATIONBAR", "EINGANTIABLE", "ATIONANTIEING", "ABLEBARESE", "CALLYPRESOUGHT", "ABLEANTIEING", "PRESOUGHTCALLY", "OUGHTPRIBAR", "ATIONCALLYCALLY", "CALLYOUGHTANTI", "BARATIONATION", "ANTIESEOUGHT", "ESEESEBAR", "OUGHTPRESEING", "PRICALLYANTI", "BARPRESATION", "BARCALLYATION", "ABLEBARABLE", "ANTIABLEOUGHT", "EINGESECALLY", "BARPRIBAR", "BARATIONESE", "ANTIPRIATION", "OUGHTBARANTI", "CALLYATIONEING", "ESEANTIATION", "PRESEINGESE", "CALLYANTICALLY", "CALLYPRIOUGHT", "CALLYABLEOUGHT", "ANTIESEPRES", "CALLYATIONESE", "ATIONATIONABLE", "BAREINGANTI", "PRICALLYESE", "ATIONOUGHTEING", "ABLEEINGOUGHT", "ATIONATIONCALLY", "EINGCALLYEING", "ESEBARBAR", "PRESPRESESE", "ANTIBARATION", "ANTIOUGHTBAR", "EINGCALLYPRI", "PRESPRESANTI", "PRESCALLYCALLY", "PRIESEABLE", "ANTIEINGCALLY", "PRIEINGATION", "ESEPRESEING", "PRIATIONESE", "ABLECALLYATION", "ANTIABLEBAR", "ATIONEINGBAR", "PRIANTIPRI", "EINGBAREING", "PRICALLYCALLY", "ATIONATIONESE", "EINGEINGBAR", "PRIANTIPRES", "OUGHTPRESESE", "ABLEABLEABLE", "OUGHTOUGHTEING", "ABLEOUGHTABLE", "ATIONPRESATION", "BARPRIOUGHT", "ANTIPRIPRES", "OUGHTABLEOUGHT", "ATIONEINGATION", "OUGHTESEPRES", "CALLYPRESBAR", "BARATIONPRES", "ESEPRESOUGHT", "ATIONATIONBAR", "EINGPRIEING", "EINGBARPRI", "ATIONCALLYANTI", "CALLYPRIPRI", "PRESBARPRES", "ESEANTIABLE", "PRESBARPRI", "ESEATIONCALLY", "BAROUGHTCALLY", "ABLEPRIPRES", "CALLYPRIANTI", "PRIPRESESE", "CALLYCALLYBAR", "EINGCALLYABLE", "OUGHTPRESOUGHT", "ATIONPRIESE", "ESEABLEPRES", "PRIANTIABLE", "ATIONBARESE", "ANTIANTICALLY", "ATIONOUGHTANTI", "ATIONANTICALLY", "PRESANTIESE", "ABLECALLYESE", "PRIBARANTI", "CALLYEINGPRI", "CALLYBARPRES", "EINGBARATION", "EINGABLEPRI", "CALLYESEATION", "PRIBARATION", "ESEATIONESE", "PRIANTIOUGHT", "ANTIOUGHTANTI", "PRESBARESE", "ANTIPRIEING", "PRIEINGPRI", "ATIONPRESCALLY", "EINGPRIOUGHT", "CALLYPRIABLE", "BARBARPRI", "PRESEINGABLE", "ESEANTIPRES", "ANTIPRESCALLY", "PRESOUGHTESE", "PRESCALLYANTI", "ABLEEINGCALLY", "EINGEINGPRI", "ABLEATIONEING", "ABLEPRIATION", "ANTIEINGATION", "ANTIEINGBAR", "BARESEATION", "BARANTIOUGHT", "PRESATIONOUGHT", "PRESANTIATION", "OUGHTATIONBAR", "CALLYPRESCALLY", "BARESEBAR", "ANTIABLECALLY", "ABLECALLYCALLY", "CALLYESEOUGHT", "ANTIEINGESE", "ANTIABLEPRI", "EINGPRESEING", "BARPRIANTI", "PRIANTIBAR", "CALLYEINGATION", "ABLEOUGHTANTI", "BARESECALLY", "ESEATIONEING", "BARPRESABLE", "ABLEOUGHTATION", "ANTIOUGHTEING", "EINGOUGHTPRES", "ATIONOUGHTBAR", "ESEPRESCALLY", "CALLYCALLYPRES", "ANTIPRIBAR", "CALLYBARCALLY", "PRESPRESEING", "PRIESEPRI", "ANTICALLYESE", "EINGPRIABLE", "BARABLEESE", "PRIBAREING", "PRIABLEATION", "CALLYBARATION", "OUGHTCALLYATION", "ANTIANTIPRES", "PRICALLYPRI", "ANTIABLEATION", "ATIONBARPRI", "BARCALLYANTI", "PRESESEABLE", "ANTIBARESE", "EINGEINGESE", "BARCALLYESE", "ABLEANTIESE", "ABLEPRIESE", "ABLEATIONANTI", "OUGHTPRICALLY", "PRESBARABLE", "ESEABLEBAR", "ESEBAREING", "ANTIANTIESE", "EINGESEPRES", "OUGHTCALLYCALLY", "ESEATIONOUGHT", "ATIONCALLYBAR", "BARPRESPRES", "CALLYESEESE", "ATIONANTIOUGHT", "EINGABLEESE", "ABLEESEATION", "CALLYABLEANTI", "PRESCALLYABLE", "EINGPRIBAR", "ABLEOUGHTOUGHT", "CALLYBAREING", "ESEESEEING", "EINGEINGABLE", "PRESESEATION", "ATIONPRICALLY", "OUGHTPRIATION", "BARABLECALLY", "PRESOUGHTPRES", "PRIEINGABLE", "ABLEPRIEING", "EINGPRESBAR", "ESEATIONATION", "PRESESEANTI", "PRESANTIABLE", "EINGCALLYPRES", "ESEOUGHTOUGHT", "PRESPRESOUGHT", "PRIEINGOUGHT", "BAROUGHTPRI", "PRESANTIEING", "ANTIPRESPRES", "ABLEATIONESE", "ANTIATIONANTI", "PRIESEBAR", "ABLEANTIBAR", "ANTIPRESEING", "OUGHTOUGHTATION", "ANTIBARPRI", "PRIATIONATION", "EINGANTIBAR", "EINGPRESATION", "PRESPRIANTI", "EINGANTIATION", "BARCALLYPRES", "ABLEESEPRES", "ANTIOUGHTCALLY", "ESEBARCALLY", "ESEEINGESE", "OUGHTCALLYOUGHT", "OUGHTOUGHTOUGHT", "ANTIABLEEING", "PRIPRIOUGHT", "ESECALLYANTI", "ATIONPRIPRI", "CALLYATIONABLE", "ATIONATIONOUGHT", "ANTIPRESATION", "ABLEATIONCALLY", "ESEBAROUGHT", "BAROUGHTABLE", "BARPRESEING", "OUGHTANTIBAR", "EINGESEBAR", "ABLEANTIPRES", "ABLEPRESANTI", "ESEPRESATION", "ESEPRESABLE", "OUGHTANTIABLE", "CALLYANTIOUGHT", "PRICALLYOUGHT", "PRIESEANTI", "BARANTIESE", "CALLYESEANTI", "PRESOUGHTABLE", "ESEEINGANTI", "PRESABLEPRES", "OUGHTEINGANTI", "CALLYOUGHTPRI", "ATIONPRIATION", "PRESPRIATION", "ANTIOUGHTABLE", "ABLEPRIABLE", "PRESESEOUGHT", "OUGHTANTIEING", "PRESOUGHTBAR", "ABLECALLYOUGHT", "ATIONATIONANTI", "ABLEESEPRI", "PRIEINGEING", "OUGHTPRIANTI", "BARANTIATION", "ATIONABLECALLY", "OUGHTESEEING", "ABLEEINGANTI", "ESEPRIEING", "PRESBARBAR", "ESECALLYPRI", "PRIABLECALLY", "OUGHTBARCALLY", "ANTIPRIABLE", "ANTICALLYABLE", "OUGHTESEABLE", "PRESBAREING", "ANTIOUGHTPRI", "EINGBAROUGHT", "ATIONPRESOUGHT", "BARPRIEING", "PRESABLEESE", "CALLYCALLYCALLY", "PRIANTIESE", "PRESPRICALLY", "BARATIONABLE", "ESEEINGABLE", "CALLYCALLYATION", "PRIATIONPRI", "PRIEINGESE", "ESECALLYOUGHT", "ESEANTIESE", "ABLEATIONPRES", "ATIONCALLYABLE", "EINGPRIANTI", "PRIABLEPRES", "CALLYESEPRES", "EINGESEEING", "CALLYOUGHTPRES", "ESEBARABLE", "OUGHTANTIANTI", "PRIEINGANTI", "EINGEINGOUGHT", "PRESABLEATION", "OUGHTATIONESE", "EINGCALLYATION", "ANTIATIONPRI", "ANTIATIONABLE", "EINGPRIPRES", "PRIBARPRI", "PRESPRIESE", "BARPRIESE", "ESEPRIANTI", "ESEOUGHTABLE", "PRIBARABLE", "ANTIATIONCALLY", "OUGHTOUGHTPRES", "EINGBARESE", "ESEOUGHTPRES", "ABLEABLECALLY", "ANTIATIONBAR", "BARESEABLE", "ANTIBARPRES", "ABLEEINGPRES", "OUGHTEINGEING", "ABLEPRIANTI", "CALLYCALLYOUGHT", "EINGEINGCALLY", "ESEBARPRES", "ANTIATIONATION", "EINGPRESABLE", "CALLYOUGHTOUGHT", "OUGHTABLEATION", "ABLEANTIANTI", "BARESEANTI", "ATIONOUGHTOUGHT", "ANTIOUGHTATION", "CALLYEINGBAR", "OUGHTATIONPRES", "CALLYABLEATION", "PRIESECALLY", "ANTIESEPRI", "BARANTIPRI", "CALLYEINGANTI", "EINGCALLYOUGHT", "PRESPRIOUGHT", "ABLEEINGATION", "ATIONOUGHTABLE", "ABLEESEANTI", "OUGHTBARBAR", "CALLYABLECALLY", "EINGBARCALLY", "OUGHTESEOUGHT", "OUGHTBARATION", "ABLECALLYPRI", "ESEEINGPRES", "ATIONEINGANTI", "OUGHTPRESPRI", "CALLYATIONBAR", "ABLEBARANTI", "ABLEPRESATION", "ESECALLYPRES", "ATIONEINGOUGHT", "PRESEINGCALLY", "PRIESEESE", "ANTIANTIPRI", "PRIANTIEING", "ABLEABLEATION", "EINGOUGHTEING", "PRESPRESBAR", "EINGBARABLE", "ANTIEINGPRI", "OUGHTBAROUGHT", "ATIONCALLYEING", "ESEOUGHTATION", "ABLECALLYABLE", "CALLYCALLYPRI", "PRESEINGOUGHT", "CALLYBARPRI", "PRIPRIATION", "ESEESEANTI", "ANTICALLYPRI", "PRESESEPRES", "ABLEANTIOUGHT", "CALLYABLEEING", "ABLEPRESBAR", "EINGANTIPRI", "CALLYABLEABLE", "ESEABLECALLY", "ESEPRIPRI", "PRICALLYATION", "BARATIONBAR", "BARPRESOUGHT", "ATIONABLEANTI", "CALLYCALLYESE", "ABLEBAREING", "EINGOUGHTCALLY", "ANTIBAROUGHT", "BARABLEATION", "PRIABLEOUGHT", "ABLEESEESE", "PRIPRESBAR", "PRESEINGPRI", "PRESESEPRI", "ANTICALLYANTI", "ANTIPRIPRI", "ATIONANTIABLE", "OUGHTATIONPRI", "BAREINGEING", "CALLYANTIBAR", "EINGPRESOUGHT", "EINGESEATION", "PRIATIONEING", "PRIPRESANTI", "OUGHTABLEEING", "BAREINGOUGHT", "OUGHTEINGCALLY", "OUGHTEINGPRI", "ESEATIONABLE", "PRIOUGHTPRI", "EINGPRICALLY", "EINGABLEEING", "OUGHTEINGABLE", "PRIOUGHTBAR", "ATIONBARANTI", "PRESCALLYOUGHT", "ANTIPRESESE", "BARANTIBAR", "EINGABLECALLY", "BARBARABLE", "CALLYATIONANTI", "CALLYESEBAR", "ESEOUGHTCALLY", "ATIONABLEBAR", "ESEANTICALLY", "ANTIPRESBAR", "OUGHTPRESCALLY", "ESECALLYABLE", "PRIABLEBAR", "ABLECALLYANTI", "PRIABLEEING", "OUGHTPRESPRES", "BARANTIPRES", "BAROUGHTANTI", "BARBARESE", "ESEESEESE", "PRIESEATION", "ANTICALLYATION", "OUGHTABLEPRI", "EINGOUGHTESE", "PRESOUGHTPRI", "PRICALLYPRES", "ANTIESEABLE", "BAROUGHTOUGHT", "ATIONCALLYPRES", "ABLEPRICALLY", "BARESEPRI", "ANTIBARCALLY", "ABLEBARBAR", "OUGHTABLEBAR", "BARPRESBAR", "ANTIABLEESE", "ATIONCALLYESE", "PRIABLEABLE", "OUGHTBAREING", "ABLEPRESABLE", "PRESEINGPRES", "ESEABLEABLE", "BARABLEABLE", "ATIONABLEOUGHT", "PRIBAROUGHT", "PRIPRIEING", "ABLEANTIATION", "PRESPRIEING", "ATIONPRESABLE", "BARPRIPRI", "EINGBARBAR", "BARPRICALLY", "ATIONANTIATION", "ABLEBARPRI", "ESEATIONPRES", "CALLYANTIANTI", "PRESATIONPRI", "ATIONATIONPRI", "OUGHTBARABLE", "PRIOUGHTABLE", "ATIONESEBAR", "ABLEABLEPRES", "PRIANTIANTI", "EINGATIONEING", "ATIONATIONEING", "BARATIONPRI", "PRESCALLYESE", "PRIBARCALLY", "ESEABLEESE", "ESEANTIPRI", "CALLYEINGABLE", "ANTIEINGANTI", "ESEATIONBAR", "ABLEABLEPRI", "BAROUGHTESE", "OUGHTPRESANTI", "BARCALLYEING", "ATIONPRESEING", "EINGCALLYESE", "ATIONPRIANTI", "ESECALLYEING", "BARANTIABLE", "ATIONESEOUGHT", "EINGOUGHTATION", "PRIBARESE", "PRESOUGHTANTI", "CALLYCALLYEING", "ABLEANTIPRI", "ANTIATIONOUGHT", "PRESEINGBAR", "ANTIBAREING", "OUGHTEINGESE", "CALLYOUGHTBAR", "EINGABLEABLE", "CALLYANTIABLE", "OUGHTANTIOUGHT", "PRESESEBAR", "CALLYATIONPRI", "ABLEATIONATION", "ESEPRESBAR", "ESEABLEANTI", "ESEESEABLE", "ESEPRIPRES", "OUGHTEINGATION", "BAREINGPRI", "ATIONABLEEING", "ESEBARPRI", "ABLEPRIBAR", "CALLYANTIPRES", "ATIONOUGHTCALLY", "EINGEINGEING", "PRIOUGHTEING", "PRIOUGHTPRES", "PRIOUGHTCALLY", "PRIOUGHTESE", "OUGHTESEESE", "PRIPRIPRI", "ATIONANTIPRI", "PRESPRIBAR", "PRIPRESCALLY", "CALLYATIONPRES", "BAREINGATION", "ABLECALLYEING", "ATIONEINGCALLY", "EINGANTICALLY", "ESEPRIBAR", "BARPRIPRES", "CALLYOUGHTCALLY", "ATIONOUGHTPRI", "BARATIONEING", "PRIEINGPRES", "EINGANTIANTI", "ABLEPRESPRI", "EINGOUGHTOUGHT", "BAREINGCALLY", "OUGHTANTIESE", "BARBAREING", "ABLEABLEOUGHT", "ESEATIONANTI", "OUGHTATIONEING", "ESEOUGHTPRI", "CALLYPRIATION", "ABLEATIONABLE", "PRESABLEBAR", "OUGHTPRIESE", "BARESEPRES", "ANTIBARABLE", "ESEANTIEING", "EINGBARANTI", "BARATIONANTI", "EINGEINGPRES", "CALLYESEEING", "PRIPRIBAR", "ESEPRESANTI", "ABLEPRESEING", "ATIONEINGEING", "CALLYBARANTI", "ABLEOUGHTPRES", "EINGOUGHTANTI", "ESEPRESESE", "PRESPRESCALLY", "EINGABLEPRES", "OUGHTPRIOUGHT", "ESEEINGCALLY", "ATIONBARBAR", "PRESOUGHTATION", "ESEABLEEING", "EINGATIONANTI", "CALLYABLEESE", "EINGANTIOUGHT", "EINGCALLYANTI", "ESEATIONPRI", "CALLYPRESPRI", "BARESEEING", "BARABLEBAR", "EINGOUGHTBAR", "ATIONPRIEING", "EINGESEPRI", "ESEBARANTI", "PRESESEEING", "BARCALLYBAR", "OUGHTCALLYPRES", "ANTIEINGOUGHT", "PRESANTIOUGHT", "ESEPRESPRI", "ESEOUGHTEING", "OUGHTCALLYPRI", "ESEEINGATION", "PRICALLYABLE", "ATIONABLEABLE", "ANTIESECALLY", "ABLEEINGESE", "CALLYATIONCALLY", "ABLEABLEESE", "ATIONANTIANTI", "ATIONBARPRES", "PRESABLEOUGHT", "ATIONATIONPRES", "CALLYPRIESE", "ABLEABLEANTI", "ESEABLEATION", "ABLEATIONPRI", "ESECALLYCALLY", "ABLEPRESOUGHT", "ESEPRIOUGHT", "PRIPRIANTI", "ABLEABLEEING", "ABLEOUGHTEING", "OUGHTOUGHTABLE", "EINGPRIESE", "ATIONESEABLE", "ABLEATIONBAR", "CALLYOUGHTEING", "EINGESEESE", "CALLYESEABLE", "ESECALLYATION", "PRIPRESEING", "EINGPRESANTI", "ANTIABLEPRES", "PRESANTIPRI", "OUGHTEINGPRES", "PRIESEOUGHT", "EINGPRIATION", "PRIATIONABLE", "EINGEINGATION", "ATIONEINGPRES", "ESEABLEPRI", "BARCALLYPRI", "EINGPRIPRI", "PRIEINGBAR", "CALLYESECALLY", "ATIONATIONATION", "CALLYABLEBAR", "ANTIESEANTI", "ABLEEINGABLE", "ATIONPRESPRI", "BARANTICALLY", "ABLEPRESCALLY", "ESEESEOUGHT", "PRIBARBAR", "EINGATIONOUGHT", "BARPRIABLE", "ABLEESEABLE", "PRIATIONANTI", "ANTIPRESPRI", "PRESCALLYPRES", "ANTIEINGPRES", "ATIONBARCALLY", "ANTIATIONESE", "EINGEINGANTI", "EINGANTIPRES", "PRESATIONPRES", "ATIONCALLYOUGHT", "ANTIABLEABLE", "OUGHTCALLYEING", "PRICALLYEING", "PRIPRIABLE", "PRESOUGHTEING", "ATIONPRESBAR", "PRESPRESATION", "ABLEEINGEING", "ATIONESEEING", "BARPRESCALLY", "CALLYPRESEING", "PRESATIONATION", "BARBARPRES", "ANTIPRICALLY", "ANTIBARANTI", "CALLYEINGEING", "ATIONOUGHTATION", "CALLYPRICALLY", "PRIANTIATION", "OUGHTOUGHTANTI", "EINGESEOUGHT", "CALLYPRESPRES", "PRIPRIPRES", "ABLEOUGHTPRI", "ATIONPRESESE", "ANTIPRIOUGHT", "PRESABLEANTI", "OUGHTPRIEING", "ESEESEPRI", "BARCALLYABLE", "ATIONPRIABLE", "OUGHTPRIPRES", "ESEESEATION", "PRESANTIANTI", "EINGESEABLE", "ANTIANTIATION", "BARBARATION", "ESECALLYESE", "OUGHTABLECALLY", "ATIONPRIBAR", "BAREINGESE", "ABLEATIONOUGHT", "OUGHTOUGHTESE", "PRESPRESABLE", "ANTIBARBAR", "ATIONBARABLE", "ANTIANTIABLE", "BARABLEPRES", "ESEPRICALLY", "PRESCALLYEING", "ATIONBARATION", "ATIONEINGPRI", "EINGATIONCALLY", "CALLYPRESESE", "ESEANTIBAR", "CALLYBARBAR", "EINGABLEBAR", "ATIONESEESE", "PRICALLYBAR", "ESEEINGBAR", "BARESEOUGHT", "OUGHTABLEANTI", "CALLYEINGPRES", "PRESABLEABLE", "OUGHTANTIPRI", "ANTIPRIESE", "PRESATIONEING", "OUGHTPRIABLE", "ATIONOUGHTESE", "OUGHTEINGOUGHT", "CALLYESEPRI", "ATIONESEATION", "ESEOUGHTANTI", "PRIPRESATION", "BARABLEANTI", "ANTIESEEING", "BAROUGHTATION", "PRESABLEPRI", "ESEBARATION", "PRIOUGHTATION", "ESEPRESPRES", "EINGOUGHTPRI", "ANTICALLYOUGHT", "PRESABLEEING", "CALLYPRIEING", "EINGCALLYBAR", "ANTIOUGHTESE", "BARABLEPRI", "ANTICALLYPRES", "ABLEPRESESE", "OUGHTATIONABLE", "ABLEESEBAR", "ATIONANTIESE", "ANTIANTIEING", "PRIOUGHTOUGHT", "ABLEBARPRES", "PRIPRESABLE", "ESEANTIANTI", "BAREINGPRES", "ANTIOUGHTPRES", "ANTIABLEANTI", "ABLEEINGBAR", "ESEPRIATION", "PRESPRESPRES", "PRESANTIPRES", "OUGHTESEANTI", "ESEESEPRES", "PRIATIONOUGHT", "PRIABLEANTI", "ANTIESEATION", "OUGHTPRESATION", "OUGHTESEBAR", "EINGPRESPRI", "ATIONANTIPRES", "PRESBARCALLY", "BARBARBAR", "PRESPRIABLE", "ANTIANTIBAR", "PRIANTICALLY", "PRIABLEESE", "ESEEINGEING", "OUGHTATIONCALLY", "ABLEPRIPRI", "CALLYPRESABLE", "CALLYPRIPRES", "ATIONESEPRES", "ESEANTIOUGHT", "ABLEEINGPRI", "EINGBARPRES", "BARPRESANTI", "ANTIANTIOUGHT", "PRIPRESPRI", "CALLYCALLYANTI", "EINGATIONPRI", "PRESPRIPRES", "PRESBARATION", "PRIATIONBAR", "ABLEPRIOUGHT", "ANTIEINGEING", "ESEESECALLY", "CALLYEINGOUGHT", "ATIONPRESPRES", "PRIOUGHTANTI", "OUGHTANTICALLY", "ATIONABLEATION", "ESEBARESE", "CALLYEINGESE", "OUGHTANTIATION", "BARABLEEING", "OUGHTBARPRI", "OUGHTPRESBAR", "EINGOUGHTABLE", "ATIONABLEPRES", "EINGCALLYCALLY", "ESEEINGOUGHT", "OUGHTANTIPRES", "BARABLEOUGHT", "ATIONESECALLY", "BAREINGABLE", "OUGHTOUGHTBAR", "CALLYBARESE", "ANTIEINGABLE", "PRESCALLYBAR", "PRESCALLYATION", "ANTIESEESE", "CALLYANTIEING", "ANTIESEBAR", "ABLEABLEBAR", "CALLYEINGCALLY", "ATIONABLEESE", "BARBARCALLY", "ANTIATIONPRES", "CALLYPRIBAR", "ANTIPRIANTI", "ATIONESEPRI", "CALLYPRESATION", "PRESCALLYPRI", "PRESEINGANTI", "ESECALLYBAR", "BARBARANTI", "PRESATIONESE", "OUGHTABLEPRES", "BARPRIATION", "PRIPRIESE", "BARCALLYOUGHT", "EINGPRESPRES", "PRIATIONPRES", "BARATIONCALLY", "CALLYANTIESE", "ESEPRIABLE", "OUGHTCALLYANTI", "OUGHTABLEABLE", "ANTIANTIANTI", "PRIPRESPRES", "EINGESEANTI", "PRESESECALLY", "BARCALLYCALLY", "ATIONPRIPRES", "EINGANTIESE", "BARPRESPRI", "PRESBAROUGHT", "ATIONCALLYPRI", "CALLYOUGHTESE", "CALLYANTIPRI", "PRIPRESOUGHT", "ABLEOUGHTBAR", "OUGHTESEPRI", "PRESABLECALLY", "PRESANTIBAR", "BAROUGHTEING", "ABLEOUGHTESE", "ABLEPRESPRES", "OUGHTATIONATION", "BAROUGHTBAR", "OUGHTCALLYESE", "ATIONPRIOUGHT", "BARANTIEING", "ABLEBARATION", "ANTIPRESABLE", "ATIONABLEPRI", "EINGABLEATION", "PRIBARPRES", "ANTIPRESANTI", "PRESBARANTI", "ANTICALLYBAR", "BARATIONOUGHT", "ATIONBAROUGHT", "BARANTIANTI", "PRESEINGATION"};
    static String[] CUSTOMER_NAMES_MINIMAL = {"CALLYANTIPRI", "ABLEANTIPRES", "CALLYANTIOUGHT", "BARESECALLY", "ANTIABLEANTI", "ESEANTIANTI", "ESEESECALLY", "ESEANTIESE", "PRESABLEBAR", "ABLECALLYABLE", "BARESEPRES", "PRIPRESEING", "ABLEABLECALLY", "ANTIATIONPRES", "EINGESEBAR", "ATIONEINGOUGHT", "PRIABLEPRI", "ABLEPRESATION", "ESEABLEATION", "OUGHTABLEPRES", "ESEEINGABLE", "PRESPRIABLE", "PRESABLEPRES", "BAROUGHTPRES", "BARPRIPRI", "PRESCALLYABLE", "ESEESEPRES", "CALLYABLEBAR", "ANTIPRIEING", "ANTIBARANTI", "PRESESEESE", "ESEATIONANTI", "PRESCALLYABLE", "ATIONPRIANTI", "BARANTIABLE", "PRIPRESPRI", "CALLYPRESPRES", "ABLEEINGPRES", "ATIONATIONPRI", "ANTIOUGHTANTI", "PRESPRESEING", "EINGBARCALLY", "ANTIATIONATION", "BAREINGEING", "CALLYOUGHTOUGHT", "BARATIONABLE", "PRESATIONCALLY", "ABLEESEESE", "EINGESEATION", "OUGHTPRICALLY", "BAROUGHTOUGHT", "PRIABLEOUGHT", "PRIOUGHTANTI", "EINGESECALLY", "OUGHTBARABLE", "ABLEPRESPRES", "ESEEINGATION", "PRIANTIOUGHT", "BARATIONBAR", "PRESPRIBAR", "ATIONPRIPRI", "OUGHTESEBAR", "OUGHTESEANTI", "EINGPRESEING", "OUGHTPRIANTI", "PRIEINGEING", "OUGHTABLEPRES", "CALLYEINGABLE", "CALLYABLEESE", "PRESATIONBAR", "EINGABLEPRES", "PRIANTIOUGHT", "CALLYESECALLY", "ABLEANTIOUGHT", "PRESPRIABLE", "ANTIESEEING", "EINGOUGHTANTI", "PRICALLYATION", "ATIONPRESPRES", "BAREINGBAR", "PRESABLEESE", "ATIONESEEING", "PRESEINGCALLY", "CALLYCALLYPRES", "ABLEPRESCALLY", "ANTIOUGHTANTI", "ANTIESEANTI", "ANTIPRESCALLY", "CALLYCALLYEING", "BARABLEPRES", "ANTIOUGHTANTI", "BAROUGHTPRES", "CALLYEINGCALLY", "ABLEEINGABLE", "ABLEEINGATION", "ATIONOUGHTABLE", "PRESANTICALLY", "OUGHTOUGHTATION", "ESEOUGHTEING", "CALLYPRESATION", "ANTIANTIANTI", "ESEATIONBAR", "OUGHTESEANTI", "OUGHTATIONANTI", "ABLEPRESEING", "ATIONPRESABLE", "CALLYABLEESE", "ESEEINGOUGHT", "EINGPRESABLE", "OUGHTCALLYCALLY", "ATIONCALLYABLE", "EINGABLEPRI", "OUGHTCALLYBAR", "PRIBARABLE", "ANTIABLEPRES", "PRIPRIOUGHT", "PRESABLEABLE", "PRESCALLYCALLY", "EINGABLEBAR", "BARPRIPRES", "ESEANTIPRI", "ANTIOUGHTATION", "BARPRESPRES", "PRESANTIPRES", "ABLECALLYBAR", "ABLEBAROUGHT", "PRIANTIOUGHT", "ESEEINGABLE", "CALLYABLEPRES", "CALLYPRESABLE", "ANTICALLYANTI", "BARCALLYABLE", "PRESEINGEING", "PRESOUGHTBAR", "ESECALLYABLE", "EINGPRIATION", "ESEPRESBAR", "ESEEINGPRES", "CALLYCALLYPRI", "ESEANTIANTI", "PRIOUGHTPRES", "BARBARPRES", "ATIONCALLYCALLY", "BARBARPRI", "ABLECALLYANTI", "ESECALLYBAR", "PRIABLEOUGHT", "ANTIANTIEING", "EINGOUGHTCALLY", "CALLYPRESCALLY", "ATIONATIONOUGHT", "PRIPRESANTI", "ESEANTIESE", "BARANTIANTI", "PRIESEEING", "PRIATIONEING", "PRESEINGESE", "ATIONPRICALLY", "BARESEPRES", "PRIPRESCALLY", "PRESEINGEING", "PRESESEEING", "BAREINGPRES", "PRIEINGPRI", "PRIANTIATION", "OUGHTPRIBAR", "EINGATIONPRES", "ATIONPRESCALLY", "ANTIATIONATION", "ESEANTIBAR", "ANTIABLEATION", "ATIONCALLYEING", "PRIPRICALLY", "ATIONPRIEING", "CALLYESEESE", "CALLYESEBAR", "BARCALLYPRES", "ESEOUGHTPRES", "PRESPRICALLY", "EINGOUGHTOUGHT", "ABLECALLYCALLY", "PRESANTIATION", "PRIPRESPRES", "ESEATIONOUGHT", "ABLEPRESESE", "PRIABLEOUGHT", "ABLEEINGOUGHT", "PRESBARESE", "BARPRESPRES", "ATIONABLEATION", "OUGHTCALLYPRES", "BARCALLYANTI", "CALLYCALLYBAR", "CALLYBARATION", "EINGOUGHTEING", "PRESBARBAR", "ABLEESECALLY", "BAROUGHTBAR", "ATIONATIONESE", "ABLECALLYEING", "ESEABLEBAR", "BAREINGBAR", "BARPRICALLY", "EINGATIONANTI", "ATIONATIONABLE", "PRESOUGHTABLE", "ABLEOUGHTEING", "ATIONANTIEING", "PRIBARCALLY", "PRESANTIBAR", "ESEOUGHTBAR", "ABLEPRIPRES", "ANTIBAROUGHT", "BARPRESOUGHT", "ATIONEINGEING", "CALLYANTIOUGHT", "PRIANTIPRI", "CALLYPRIPRI", "ATIONEINGEING", "BARCALLYESE", "CALLYABLEABLE", "CALLYATIONOUGHT", "PRIOUGHTCALLY", "OUGHTCALLYATION", "ANTIESEOUGHT", "PRESBARANTI", "ABLEESEPRI", "OUGHTANTIPRI", "PRESBARESE", "ATIONEINGABLE", "EINGATIONPRI", "ABLEOUGHTCALLY", "ABLEESEEING", "ANTIABLEBAR", "ESEESEANTI", "ATIONESEANTI", "ATIONEINGABLE", "PRICALLYPRES", "PRICALLYANTI", "PRESANTIABLE", "OUGHTPRESANTI", "ABLEESEPRES", "EINGATIONESE", "PRIATIONANTI", "PRESATIONCALLY", "ESEPRESANTI", "EINGPRIABLE", "PRESOUGHTOUGHT", "CALLYPRIANTI", "PRESANTICALLY", "ATIONEINGPRI", "ATIONANTIANTI", "CALLYPRESATION", "ESEANTIABLE", "ANTIPRIBAR", "BARABLECALLY", "CALLYCALLYCALLY", "ESEEINGPRES", "PRESPRESABLE", "ANTICALLYOUGHT", "OUGHTABLEABLE", "PRESESEABLE", "EINGBARCALLY", "BARATIONABLE", "ANTIOUGHTCALLY", "ATIONPRIANTI", "ANTIATIONCALLY", "OUGHTPRIESE", "CALLYPRESPRI", "ANTIEINGBAR", "OUGHTABLEATION", "ATIONANTIBAR", "ANTICALLYOUGHT", "PRIPRIBAR", "OUGHTCALLYOUGHT", "BARBARANTI", "ESEEINGPRI", "ATIONPRIBAR", "PRIEINGESE", "EINGATIONATION", "ABLEBARATION", "ANTIPRESCALLY", "ATIONESEATION", "ESEANTIATION", "CALLYOUGHTABLE", "OUGHTANTIABLE", "ABLEANTIATION", "CALLYESEBAR", "ESEPRIBAR", "ATIONESEATION", "PRIBARATION", "ANTIANTIESE", "ABLEPRESCALLY", "ABLEPRIEING", "BARABLEABLE", "PRIEINGCALLY", "EINGANTIBAR", "PRIANTIPRES", "ATIONPRESATION", "CALLYEINGPRES", "EINGESEABLE", "EINGPRESOUGHT", "OUGHTBARPRI", "BARESECALLY", "ESEATIONPRES", "ANTIOUGHTPRES", "BARBARESE", "PRESPRESESE", "PRESESEANTI", "PRIEINGBAR", "ANTIPRIESE", "BARPRESEING", "BARPRESEING", "BARANTIOUGHT", "BARPRESEING", "PRIPRIESE", "ESECALLYCALLY", "ATIONEINGPRES", "ABLEESECALLY", "CALLYATIONBAR", "EINGPRESPRI", "ATIONANTIANTI", "PRIANTIPRES", "PRIATIONBAR", "ANTIABLEOUGHT", "PRESATIONBAR", "ATIONATIONOUGHT", "EINGANTIEING", "CALLYANTICALLY", "BAROUGHTPRI", "BARANTIEING", "OUGHTBARABLE", "ABLEPRESPRI", "ABLEBARBAR", "CALLYANTIPRES", "CALLYBAREING", "ATIONBARABLE", "OUGHTBARANTI", "PRIEINGBAR", "PRICALLYEING", "EINGOUGHTATION", "PRIANTIEING", "ESEANTIABLE", "ANTIPRIBAR", "ATIONPRIESE", "ABLEESEATION", "CALLYBARPRI", "PRESANTIEING", "CALLYCALLYBAR", "CALLYPRIBAR", "CALLYABLEABLE", "EINGEINGESE", "EINGABLEESE", "CALLYESECALLY", "ATIONCALLYABLE", "ATIONANTIPRI", "CALLYOUGHTEING", "ESEANTICALLY", "ABLECALLYESE", "BARPRIABLE", "ATIONCALLYATION", "PRIPRESANTI", "ESEOUGHTPRES", "OUGHTBARANTI", "CALLYOUGHTATION", "CALLYCALLYATION", "PRIESEPRES", "OUGHTPRIBAR", "ATIONATIONABLE", "BAROUGHTABLE", "PRESATIONATION", "BAROUGHTESE", "PRIANTIATION", "ANTIABLEANTI", "EINGPRICALLY", "EINGBARABLE", "CALLYOUGHTCALLY", "PRESBARCALLY", "ESEABLEEING", "ABLEANTIPRI", "ATIONPRESPRI", "PRESEINGPRES", "PRESPRESANTI", "PRIATIONCALLY", "PRIABLEESE", "ATIONANTIPRES", "PRIESEABLE", "ATIONCALLYATION", "ESEANTIABLE", "OUGHTATIONPRI", "ANTIPRESBAR", "ANTIPRESOUGHT", "ABLEABLEBAR", "BARPRESBAR", "ABLEPRIPRES", "ATIONCALLYABLE", "PRIATIONEING", "PRIOUGHTEING", "OUGHTCALLYPRI", "BARANTIBAR"};

    public static String getSysProp(String inSysProperty, String defaultValue) {

        String outPropertyValue = null;

        try {
            outPropertyValue = System.getProperty(inSysProperty, defaultValue);
        } catch (Exception e) {
            System.err.println("Error Reading Required System Property '" + inSysProperty + "'");
        }

        return (outPropertyValue);

    } // end getSysProp


    public static String randomStr(long strLen) {

        char freshChar;
        String freshString;
        freshString = "";

        while (freshString.length() < (strLen - 1)) {

            freshChar = (char) (Math.random() * 128);
            if (Character.isLetter(freshChar)) {
                freshString += freshChar;
            }
        }

        return (freshString);

    } // end randomStr


    public static String getCurrentTime() {
        return dateFormat.format(new java.util.Date());
    }

    public static String formattedDouble(double d) {
        String dS = "" + d;
        return dS.length() > 6 ? dS.substring(0, 6) : dS;
    }

    public static int getItemID(Random r) {
//        return nonUniformRandom(8191, 1, 100000, r);
        return nonUniformRandom(((Long) Math.round(TpccConfig.configItemCount * 0.08191)).intValue(), 1, TpccConfig.configItemCount, r);
    }

    public static int getCustomerID(Random r) {
//        return nonUniformRandom(1023, 1, 3000, r);
        return nonUniformRandom(((Long) Math.round(TpccConfig.configCustPerDist * 0.341)).intValue(), 1, TpccConfig.configCustPerDist, r);
    }

    public static String getLastName(Random r) {
        if (configCustPerDist != 3000) {
            int num = (int) nonUniformRandom(255, 0, 399, r);
            return CUSTOMER_NAMES_MINIMAL[num];
        }

        int num = (int) nonUniformRandom(255, 0, 999, r);
        return CUSTOMER_NAMES[num];
//        return nameTokens[num / 100] + nameTokens[(num / 10) % 10] + nameTokens[num % 10];
    }

    public static int randomNumber(int min, int max, Random r) {
        return (int) (r.nextDouble() * (max - min + 1) + min);
    }


    // A: A is a constant chosen according to the size of the range [x .. y]
    //    for C_LAST, the range is [0 .. 999] and A = 255
    //    for C_ID, the range is [1 .. 3000] and A = 1023
    //    for OL_I_ID, the range is [1 .. 100000] and A = 8191
    public static int nonUniformRandom(int A, int min, int max, Random r) {
        return (((randomNumber(0, A, r) | randomNumber(min, max, r)) + randomNumber(0, A, r)) % (max - min + 1)) + min;
    }

//    public static String leftPad(String str, int left) {
//        return org.apache.commons.lang.StringUtils.leftPad(str, left, " ");
//    }


    // this is for dynastar, use the one below for ssmr
//    public static int mapIdToPartition(ObjId objId) {
//        if (objId.getSId() == null) return objId.hashCode() % Partition.getPartitionList().size();
//        String parts[] = objId.getSId().split(":");
//        int ret = -1;
//        switch (parts[0]) {
//            case "Warehouse":
//
//                ret = Integer.parseInt(parts[1].split("=")[1]) % Partition.getPartitionList().size();
//                break;
//            case "Stock":
//                ret = (mapStockToDistrict(objId.sId) + Integer.parseInt(parts[1].split("=")[1])) % Partition.getPartitionList().size();
//                break;
//            case "District":
//            case "History":
//            case "Order":
//            case "NewOrder":
//            case "OrderLine":
//            case "Customer":
//                ret = (Integer.parseInt(parts[2].split("=")[1]) + Integer.parseInt(parts[1].split("=")[1])) % Partition.getPartitionList().size();
//                break;
//            case "Item":
//                ret = objId.hashCode() % Partition.getPartitionList().size();
//                break;
//            default:
//                ret = 0;
//                break;
//        }
//        return ret;
//
//    }

    // this is for ssmr, use the one above for dynastar
//    public static int mapIdToPartition(ObjId objId) {
//        if (objId.getSId() == null) return objId.hashCode() % Partition.getPartitionList().size();
//        String parts[] = objId.getSId().split(":");
//        int ret = -1;
//        switch (parts[0]) {
//            case "Stock":
//            case "District":
//            case "History":
//            case "Order":
//            case "NewOrder":
//            case "OrderLine":
//            case "Customer":
//            case "Warehouse":
//                ret = Integer.parseInt(parts[1].split("=")[1]) % Partition.getPartitionList().size();
//                break;
//            case "Item":
//                ret = objId.hashCode() % Partition.getPartitionList().size();
//                break;
//            default:
//                ret = 0;
//                break;
//        }
//        return ret;
//
//    }

//    public static void loadDataToCache(String dataFile, PRObjectMap graph, Map<String, Set<ObjId>> secondaryIndex, Callback callback) {
//        Map<String, String[]> ret = new HashMap<>();
//        TpccProcedure procedure = new TpccProcedure();
//        TpccDataGenerator.loadCSVData(dataFile, line -> {
//            String[] tmp = line.split(",");
//            ObjId objId = null;
//            Map<String, Object> obj = null;
//            if (tmp.length == 2) {
//
//            } else {
//                switch (tmp[0]) {
//                    case "Header":
//                        ret.put(tmp[1], Arrays.copyOfRange(tmp, 1, tmp.length));
//                        break;
//                    default:
//                        objId = new ObjId(Long.parseLong(tmp[1]));
//                        obj = Row.csvToHashMap(ret.get(tmp[0]), tmp);
//                        break;
//                }
//            }
//            if (objId != null) {
//                obj.put("model", tmp[0]);
//                objId.setSId(Row.genSId(obj));
//                List<String> keys = Row.genStrObjId(obj);
//                for (String key : keys) {
//                    procedure.addToSecondaryIndex(secondaryIndex, key, objId, null);
//                }
//                if (callback != null) callback.callback(objId, obj);
//            }
//        });
//    }

    public static void extractObjectIds(TpccCommandType cmdType, Map<String, Object> params, PRObjectMap graph, Map<String, Set<ObjId>> secondaryIndex) {
        switch ((TpccCommandType) cmdType) {
            case NEW_ORDER: {
                int terminalWarehouseID = (int) params.get("w_id");
                int districtID = (int) params.get("d_id");
                int customerID = (int) params.get("c_id");
                int numItems = (int) params.get("ol_o_cnt");
                int allLocal = (int) params.get("o_all_local");
                int[] itemIDs = (int[]) params.get("itemIds");
                int[] supplierWarehouseIDs = (int[]) params.get("supplierWarehouseIDs");
                int[] orderQuantities = (int[]) params.get("orderQuantities");
                ObjId warehouseObjId = secondaryIndex.get(Row.genSId("Warehouse", terminalWarehouseID)).iterator().next();
                ObjId districtObjId = secondaryIndex.get(Row.genSId("District", terminalWarehouseID, districtID)).iterator().next();
                ObjId customerDistrictId = secondaryIndex.get(Row.genSId("Customer", terminalWarehouseID, districtID, customerID)).iterator().next();
                Set<ObjId> itemObjIds = new HashSet<>();
                for (int i = 0; i < numItems; i++) {
                    itemObjIds.add(secondaryIndex.get(Row.genSId("Item", itemIDs[i])).iterator().next());
                }
                Set<ObjId> supplierWarehouseObjIds = new HashSet<>();
                for (int i = 0; i < numItems; i++) {
                    supplierWarehouseObjIds.add(secondaryIndex.get(Row.genSId("Warehouse", supplierWarehouseIDs[i])).iterator().next());
                }

                Set<ObjId> stockObjIds = new HashSet<>();
                for (int i = 0; i < numItems; i++) {
                    stockObjIds.add(secondaryIndex.get(Row.genSId("Stock", supplierWarehouseIDs[i], itemIDs[i])).iterator().next());
                }

                break;
            }
        }
    }

    public static int mapStockToDistrict(String sId) {
//        return 1;
        String parts[] = sId.split(":");
        if (!parts[0].equals("Stock")) {
            System.out.println(sId + "is not a stock level");
//            System.exit(-1);
        }
        int i_id = Integer.parseInt(parts[2].split("=")[1]);
        return i_id % TpccConfig.configDistPerWhse + 1;
    }

    public static Set<ObjId> getStockDistrictId(int w_id) {
        Set<ObjId> ret = new HashSet<>();
//        ret.add(new ObjId(Row.genSId("District", w_id, 1)));
        for (int i = 1; i <= TpccConfig.configDistPerWhse; i++) {
            ret.add(new ObjId(Row.genSId("District", w_id, i)));
        }
        return ret;
    }

    public interface Callback {
        void callback(ObjId objId, Map<String, Object> obj);
    }
} // end jTPCCUtil
